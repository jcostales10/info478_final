### Intro Page ###
conclusion <- tabPanel(
"Conclusion",
mainPanel(
h2("Insert Conclusion title"),
)
)
ui <- fluidPage(
navbarPage(
inverse = TRUE,
"Info 478 Final Project", # app title
intro_page,
w,
x,
y,
z,
conclusion
))
runApp()
View(exemption_sums)
runApp()
runApp()
runApp()
runApp()
output$exemptions <- renderPlotly({
# make df based on input
exemption_summary <- exemption_summary %>%
filter(reasons == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
library(shiny)
library(ggplot2)
library(tidyverse)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_summary <- exemption_summary %>%
filter(reasons == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
View(exemption_summary)
runApp()
runApp()
library(shiny)
library(ggplot2)
library(tidyverse)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_summary <- exemption_summary %>%
filter(reasons == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
#--------------------- IMMUNIZATION (COUNTY) ---------------------#
#--------------------- IMMUNIZATION (DISTRICT) ---------------------#
}
runApp()
#UI
library(shiny)
library(ggplot2)
library(plotly)
source("scripts/exemptions.R")
### Intro Page ###
intro_page <- tabPanel(
"Introduction",
mainPanel(
h2("Insert Intro"),
)
)
### Page 1 ###
# insert code for buttons/sliders here
w <- tabPanel(
"Insert title",
h1("Page 1 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Exemptions ###
# insert code for buttons/sliders here
x <- tabPanel(
"Reasons for Exemption",
h1("Reasons for Exemption"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"exemptions",
label = h3("Exemption Reasons"),
choices = list(
"Personal" = exemption_sums$`Personal exemption`,
"Medical" = exemption_sums$`Medical exemption`,
"Religious" = exemption_sums$`Religious exemption`,
"Religious membership" = exemption_sums$`Religious membership exemption`
),
selected = list("Personal", "Medical")
)
),
mainPanel(
# insert plot here
plotlyOutput(outputId = "exemption_vis")
)
),
h2("Insert findings/research/etc"),
)
### Page 3 ###
# insert code for buttons/sliders here
y <- tabPanel(
"Insert title",
h1("Page 3 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Page 3 ###
# insert code for buttons/sliders here
z <- tabPanel(
"Insert title",
h1("Page 4 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Intro Page ###
conclusion <- tabPanel(
"Conclusion",
mainPanel(
h2("Insert Conclusion title"),
)
)
ui <- fluidPage(
navbarPage(
inverse = TRUE,
"Info 478 Final Project", # app title
intro_page,
w,
x,
y,
z,
conclusion
))
runApp()
runApp()
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/enrollment.R")
source("../scripts/exemptions.R")
source("../scripts/districts_by_county.R")
library(ggplot2)
library(shiny)
library(knitr)
library(plotly)
library("maps")
library("mapproj")
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/enrollment.R")
source("../scripts/exemptions.R")
runApp()
View(exemption_summary)
library(plotly)
runApp()
library(shiny)
library(ggplot2)
library(tidyverse)
library(plotly)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
#--------------------- IMMUNIZATION (COUNTY) ---------------------#
#--------------------- IMMUNIZATION (DISTRICT) ---------------------#
}
library(shiny)
library(ggplot2)
library(tidyverse)
library(plotly)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
#--------------------- IMMUNIZATION (COUNTY) ---------------------#
#--------------------- IMMUNIZATION (DISTRICT) ---------------------#
}
runApp()
View(exemption_vis)
library(tidyverse)
library(plotly)
library(shiny)
vac_2017 <- read.csv("data/immunization_2017.csv", stringsAsFactors = F)
# Count total of all exemptions
# filter out all the schools not reported and keep necessary columns
reported_only <- vac_2017 %>%
filter(Reported == "Y") %>%
select(School_Name, Number_with_medical_exemption,
Number_with_personal_exemption, Number_with_religious_exemption,
Number_with_religious_membership_exemption)
# calculate sum of exemptions and rename columns
exemption_sums <- reported_only %>%
summarize(
count_medical_exemption = sum(Number_with_medical_exemption),
count_personal_exemption = sum(Number_with_personal_exemption),
count_religious_exemption = sum(Number_with_religious_exemption),
count_religious_membership_exemption = sum(Number_with_religious_membership_exemption)
) %>%
rename("Personal exemption" = count_personal_exemption) %>%
rename("Medical exemption" = count_medical_exemption) %>%
rename("Religious exemption" = count_religious_exemption) %>%
rename("Religious membership exemption" = count_religious_membership_exemption)
# organized exemption_sums to make it easy to work with
exemption_summary <- exemption_sums %>%
gather(key = "reasons", value = "count",
"Personal exemption", "Medical exemption",
"Religious exemption", "Religious membership exemption") %>%
arrange(-count)
# plotly piechart to display counts and percentages
exemption_vis <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_vis <- exemption_vis %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_vis
exemption_plot
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_plot
})
runApp()
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
library(shiny)
library(ggplot2)
library(tidyverse)
library(plotly)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_plot
})
library(shiny)
library(ggplot2)
library(tidyverse)
library(plotly)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
source("app_ui.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_plot
})
#--------------------- IMMUNIZATION (COUNTY) ---------------------#
#--------------------- IMMUNIZATION (DISTRICT) ---------------------#
}
runApp()
runApp()
runApp()
runApp()
runApp()
#UI
library(shiny)
library(ggplot2)
library(plotly)
source("scripts/exemptions.R")
### Intro Page ###
intro_page <- tabPanel(
"Introduction",
mainPanel(
h2("Insert Intro"),
)
)
### Page 1 ###
# insert code for buttons/sliders here
w <- tabPanel(
"Insert title",
h1("Page 1 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Exemptions ###
# insert code for buttons/sliders here
x <- tabPanel(
"Reasons for Exemption",
h1("Reasons for Exemption"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"exemptions",
label = h3("Exemption Reasons"),
choices = list(
"Personal" = exemption_sums$`Personal exemption`,
"Medical" = exemption_sums$`Medical exemption`,
"Religious" = exemption_sums$`Religious exemption`,
"Religious membership" = exemption_sums$`Religious membership exemption`
),
selected = list("Personal", "Medical")
)
),
mainPanel(
# insert plot here
plotlyOutput(outputId = "exemption_vis")
)
),
h2("Insert findings/research/etc"),
)
### Page 3 ###
# insert code for buttons/sliders here
y <- tabPanel(
"Insert title",
h1("Page 3 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Page 3 ###
# insert code for buttons/sliders here
z <- tabPanel(
"Insert title",
h1("Page 4 Title"),
sidebarLayout(
sidebarPanel(
#insert button/slider variables here
),
mainPanel(
# insert plot here
)
),
h2("Insert findings/research/etc"),
)
### Intro Page ###
conclusion <- tabPanel(
"Conclusion",
mainPanel(
h2("Insert Conclusion title"),
)
)
ui <- fluidPage(
navbarPage(
inverse = TRUE,
"Info 478 Final Project", # app title
intro_page,
w,
x,
y,
z,
conclusion
))
library(shiny)
library(ggplot2)
library(tidyverse)
library(plotly)
require(knitr)
opts_chunk$set(comment = NA, message = FALSE, tidy = FALSE)
source("scripts/exemptions.R")
source("app_ui.R")
server <- function(input, output){
#--------------------- ENROLLMENT ---------------------#
#--------------------- EXEMPTIONS ---------------------#
output$exemptions <- renderPlotly({
# make df based on input
exemption_modified <- exemption_summary %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_plot
})
#--------------------- IMMUNIZATION (COUNTY) ---------------------#
#--------------------- IMMUNIZATION (DISTRICT) ---------------------#
}
runApp()
setwd("~/Documents/UW/Junior/INFO 478/info478_final")
runApp()
runApp()
runApp()
