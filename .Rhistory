dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay), na.rm = T)
View(dep_delay_by_month)
flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay), na.rm = T)
flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) %>%
filter(avg_delay = max((avg_delay))) %>%
pull(month)
flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) %>%
filter(avg_delay = max(avg_delay)) %>%
pull(month)
flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) %>%
filter(avg_delay = max(avg_delay)) %>%
pull(month)
plot(flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) )
flights %>%
group_by(destination) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
filter(avg_delay = max(avg_delay))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
filter(avg_delay = max(avg_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) %>%
filter(avg_delay = max(avg_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_speed = mean(distance / air_time, na.rm = T)) %>%
filter(avg_speed == max(avg_speed, na.rm = T))
install.packages(shiny)
install.packages("shiny")
? p()
? p
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='azimkl',
token='431CBEB8AD224F27AE41E529E1F501C5',
secret='<SECRET>')
rsconnect::setAccountInfo(name='azimkl', token='431CBEB8AD224F27AE41E529E1F501C5', secret='V4pMGeLs+bDhkw9sIfb8V5fMRhamL4Wa4iQgoAfj')
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
\documentclass[11pt]{article}
\usepackage{longtable} % for tables
\usepackage{adjustbox}
library(reporttools)
library(stargazer)
install.packages("reporttools")
install.packages("stargazer")
install.packages("xtable")
library("knitr")
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
library(readxl)
healthcare_infections <- read_excel("Documents/healthcare infections.xlsx",
sheet = "Table 3a-State CLABSI Data")
View(healthcare_infections)
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("shinyWidgets")
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("devtools")
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
install.packages("EpiModel", repo = 'https://mac.r-project.org/')
sessionInfo()
install.packages("EpiModel", dependencies = T)
cancel
no
install.packages("EpiModel")
install.packages("EpiModel")
install.packages("EpiModel")
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
install.packages("EpiModel")
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel")
library(EpiModel)
detach("package:EpiModel", unload = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel")
sessionInfo()
sessionInfo()
install.packages("EpiModel")
install.packages(c("EpiModel", "shiny", "tidyverse"))
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
?param.dcm
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
?param.dcm
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Toggle for staying at home
checkboxInput(
inputId = "stayhome",
label = "Enforce Stay at Home order",
value = TRUE
),
# Toggle for wearing mask
checkboxInput(
inputId = "mask",
label = "Enforce wearing a N-95 mask",
value = TRUE
),
checkboxInput(
inputId = "social_distance",
label = "Enforce social distancing (6 ft)",
value = TRUE
),
checkboxInput(
inputId = "handwash",
label = "Diligent handwashing",
value = TRUE
)
),
# Toggle or slider for social distancing ??
# Toggle for handwashing
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
if (input$stayhome == TRUE) {
stayhome <- 0
} else {
stayhome <- 1
}
if (input$mask == TRUE) {
mask <- 0.05
} else {
mask <- 1
}
param <- param.dcm(inf.prob = mask, act.rate = stayhome, rec.rate = 1/20)
#a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
# par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Toggle for staying at home
checkboxInput(
inputId = "stayhome",
label = "Enforce Stay at Home order",
value = TRUE
),
# Toggle for wearing mask
checkboxInput(
inputId = "mask",
label = "Enforce wearing a N-95 mask",
value = TRUE
),
checkboxInput(
inputId = "social_distance",
label = "Enforce social distancing (6 ft)",
value = TRUE
),
checkboxInput(
inputId = "handwash",
label = "Diligent handwashing",
value = TRUE
)
),
# Toggle or slider for social distancing ??
# Toggle for handwashing
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
if (input$stayhome == TRUE) {
stayhome <- 0
} else {
stayhome <- 0.5
}
if (input$mask == TRUE) {
mask <- 0.05
} else {
mask <- 1
}
param <- param.dcm(inf.prob = 0.3, act.rate = stayhome, rec.rate = 1/20)
#a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
# par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# act.rate
radioButtons(
inputId = "individual_interventions",
label = h3("Individual Safety Practices"),
choices = list(
"Wear a N-95 Mask" = 0.05,
"Diligent handwashing" = 0.63
)
),
# inf.prob
radioButtons(
inputId = "laws",
label = h3("Levels of Distancing"),
choices = list(
"No mandatory distancing" = 1,
"Mandatory social distancing (6 ft)" = 0.8,
"Mandatory stay at home" = 0
)
),
# nsteps
sliderInput(
inputId = "num_days",
label = "Number of days recorded",
min = 0,
max = 500,
value = 100
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
# set parameters
param <- param.dcm(inf.prob = as.numeric(input$laws),
act.rate = as.numeric(input$individual_interventions),
rec.rate = 1/20)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = num_days, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages(c("mapproj", "maps"))
knitr::opts_chunk$set(echo = TRUE)
odds_exposed <- 75 / (75-25)
odds_unexposed <- (150 - 100) / 100
odds_ratio <- odds_exposed / odds_unexposed
setwd("~/Documents/UW/Junior/INFO 478/info478_final/eda")
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/enrollment.R/")
source("../scripts/exemptions.R/")
source("../scripts/districts_by_county.R/")
library(ggplot2)
library(shiny)
library(knitr)
library(plotly)
library("maps")
library("mapproj")
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/enrollment.R")
source("../scripts/exemptions.R")
source("../scripts/districts_by_county.R")
library(ggplot2)
library(shiny)
library(knitr)
library(plotly)
library("maps")
library("mapproj")
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/enrollment.R")
source("../scripts/exemptions.R")
source("../scripts/districts_by_county.R")
library(ggplot2)
library(shiny)
library(knitr)
library(plotly)
library("maps")
library("mapproj")
checkboxGroupInput(
"exemptions",
label = h3("Exemption Reasons"),
choices = list(
"Personal" = exemption_sums$`Personal exemption`,
"Medical" = exemption_sums$`Medical exemption`,
"Religious" = exemption_sums$`Religious exemption`,
"Religious membership" = exemption_sums$`Religious membership exemption`
),
selected = c(exemption_sums$`Personal exemption`, exemption_sums$`Medical exemption`,
exemption_sums$`Religious exemption`, exemption_sums$`Religious membership exemption`)
)
renderPlotly({
# make df based on input
exemption_modified <- exemption_summary  %>%
filter(count == input$exemptions)
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
checkboxGroupInput(
"exemptions",
label = h3("Exemption Reasons"),
choices = list(
"Personal" = exemption_sums$`Personal exemption`,
"Medical" = exemption_sums$`Medical exemption`,
"Religious" = exemption_sums$`Religious exemption`,
"Religious membership" = exemption_sums$`Religious membership exemption`
),
selected = c(exemption_sums$`Personal exemption`, exemption_sums$`Medical exemption`,
exemption_sums$`Religious exemption`, exemption_sums$`Religious membership exemption`)
)
renderPlotly({
# make df based on input
exemption_modified <- function(input, exemption_summary) ({
exemption_summary %>%
filter(count == input$exemptions)
})
# plotly piechart to display counts and percentages
exemption_plot <- plot_ly(data = exemption_modified, labels = ~reasons,
values = ~count, type = 'pie')
exemption_plot <- exemption_plot %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
setwd("~/Documents/UW/Junior/INFO 478/info478_final")
runApp()
runApp()
runApp()
runApp()
