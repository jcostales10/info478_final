group_by(destination) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
filter(avg_delay = max(avg_delay))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T))
filter(avg_delay = max(avg_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(dep_delay, na.rm = T)) %>%
filter(avg_delay = max(avg_delay, na.rm = T))
flights %>%
group_by(dest) %>%
summarise(avg_speed = mean(distance / air_time, na.rm = T)) %>%
filter(avg_speed == max(avg_speed, na.rm = T))
install.packages(shiny)
install.packages("shiny")
? p()
? p
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='azimkl',
token='431CBEB8AD224F27AE41E529E1F501C5',
secret='<SECRET>')
rsconnect::setAccountInfo(name='azimkl', token='431CBEB8AD224F27AE41E529E1F501C5', secret='V4pMGeLs+bDhkw9sIfb8V5fMRhamL4Wa4iQgoAfj')
shiny::runApp('Documents/UW/Sophomore/INFO 201/a7-azimkl')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
shiny::runApp('Documents/UW/Sophomore/INFO 201/Info-201-project')
\documentclass[11pt]{article}
\usepackage{longtable} % for tables
\usepackage{adjustbox}
library(reporttools)
library(stargazer)
install.packages("reporttools")
install.packages("stargazer")
install.packages("xtable")
library("knitr")
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
library(readxl)
healthcare_infections <- read_excel("Documents/healthcare infections.xlsx",
sheet = "Table 3a-State CLABSI Data")
View(healthcare_infections)
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("shinyWidgets")
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("devtools")
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel", dependencies = TRUE)
install.packages("EpiModel", dependencies = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
install.packages("EpiModel", repo = 'https://mac.r-project.org/')
sessionInfo()
install.packages("EpiModel", dependencies = T)
cancel
no
install.packages("EpiModel")
install.packages("EpiModel")
install.packages("EpiModel")
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("robustbase")
install.packages("EpiModel")
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel")
library(EpiModel)
detach("package:EpiModel", unload = TRUE)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
install.packages("EpiModel")
sessionInfo()
sessionInfo()
install.packages("EpiModel")
install.packages(c("EpiModel", "shiny", "tidyverse"))
shiny::runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
?param.dcm
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
?param.dcm
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Toggle for staying at home
checkboxInput(
inputId = "stayhome",
label = "Enforce Stay at Home order",
value = TRUE
),
# Toggle for wearing mask
checkboxInput(
inputId = "mask",
label = "Enforce wearing a N-95 mask",
value = TRUE
),
checkboxInput(
inputId = "social_distance",
label = "Enforce social distancing (6 ft)",
value = TRUE
),
checkboxInput(
inputId = "handwash",
label = "Diligent handwashing",
value = TRUE
)
),
# Toggle or slider for social distancing ??
# Toggle for handwashing
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
if (input$stayhome == TRUE) {
stayhome <- 0
} else {
stayhome <- 1
}
if (input$mask == TRUE) {
mask <- 0.05
} else {
mask <- 1
}
param <- param.dcm(inf.prob = mask, act.rate = stayhome, rec.rate = 1/20)
#a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
# par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Toggle for staying at home
checkboxInput(
inputId = "stayhome",
label = "Enforce Stay at Home order",
value = TRUE
),
# Toggle for wearing mask
checkboxInput(
inputId = "mask",
label = "Enforce wearing a N-95 mask",
value = TRUE
),
checkboxInput(
inputId = "social_distance",
label = "Enforce social distancing (6 ft)",
value = TRUE
),
checkboxInput(
inputId = "handwash",
label = "Diligent handwashing",
value = TRUE
)
),
# Toggle or slider for social distancing ??
# Toggle for handwashing
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
if (input$stayhome == TRUE) {
stayhome <- 0
} else {
stayhome <- 0.5
}
if (input$mask == TRUE) {
mask <- 0.05
} else {
mask <- 1
}
param <- param.dcm(inf.prob = 0.3, act.rate = stayhome, rec.rate = 1/20)
#a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
# par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(shiny)
library(tidyverse)
library(EpiModel)
# DCM page
dcm_page <- tabPanel(
title = "Deterministic Model",
titlePanel("Deterministic Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# act.rate
radioButtons(
inputId = "individual_interventions",
label = h3("Individual Safety Practices"),
choices = list(
"Wear a N-95 Mask" = 0.05,
"Diligent handwashing" = 0.63
)
),
# inf.prob
radioButtons(
inputId = "laws",
label = h3("Levels of Distancing"),
choices = list(
"No mandatory distancing" = 1,
"Mandatory social distancing (6 ft)" = 0.8,
"Mandatory stay at home" = 0
)
),
# nsteps
sliderInput(
inputId = "num_days",
label = "Number of days recorded",
min = 0,
max = 500,
value = 100
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "dcm")
)
)
)
#ICM Page
icm_page <- tabPanel(
title = "Individual Contact Model",
titlePanel("Individual Contact Model")
)
#Analysis Page
analysis_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis")
)
ui <- navbarPage(
title = "Interactive Disease Modeling Simulation of COVID-19 Pandemic",
dcm_page,
icm_page,
analysis_page
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$dcm <- renderPlot({
# set parameters
param <- param.dcm(inf.prob = as.numeric(input$laws),
act.rate = as.numeric(input$individual_interventions),
rec.rate = 1/20)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = num_days, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
runApp('Documents/UW/Junior/INFO 478/a2-azimkl/disease_modeling')
library(tidyverse)
library(plotly)
vac_2017 <- read.csv("../data/immunization_2017.csv", stringsAsFactors = F)
# Count total of all exemptions
# filter out all the schools not reported and keep necessary columns
reported_only <- vac_2017 %>%
filter(Reported == "Y") %>%
select(School_Name, Number_with_medical_exemption,
Number_with_personal_exemption, Number_with_religious_exemption,
Number_with_religious_membership_exemption)
# calculate sum of exemptions and rename columns
exemption_sums <- reported_only %>%
summarize(
count_medical_exemption = sum(Number_with_medical_exemption),
count_personal_exemption = sum(Number_with_personal_exemption),
count_religious_exemption = sum(Number_with_religious_exemption),
count_religious_membership_exemption = sum(Number_with_religious_membership_exemption)
) %>%
rename("Personal exemption" = count_personal_exemption) %>%
rename("Medical exemption" = count_medical_exemption) %>%
rename("Religious exemption" = count_religious_exemption) %>%
rename("Religious membership exemption" = count_religious_membership_exemption)
# organized exemption_sums to make it easy to work with
exemption_summary <- exemption_sums %>%
gather(key = "reasons", value = "count",
"Personal exemption", "Medical exemption",
"Religious exemption", "Religious membership exemption") %>%
arrange(-count)
# plotly piechart to display counts and percentages
exemption_vis <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_vis <- exemption_vis %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_vis
setwd("~/Documents/UW/Junior/INFO 478/info478_final/scripts")
library(tidyverse)
library(plotly)
vac_2017 <- read.csv("../data/immunization_2017.csv", stringsAsFactors = F)
# Count total of all exemptions
# filter out all the schools not reported and keep necessary columns
reported_only <- vac_2017 %>%
filter(Reported == "Y") %>%
select(School_Name, Number_with_medical_exemption,
Number_with_personal_exemption, Number_with_religious_exemption,
Number_with_religious_membership_exemption)
# calculate sum of exemptions and rename columns
exemption_sums <- reported_only %>%
summarize(
count_medical_exemption = sum(Number_with_medical_exemption),
count_personal_exemption = sum(Number_with_personal_exemption),
count_religious_exemption = sum(Number_with_religious_exemption),
count_religious_membership_exemption = sum(Number_with_religious_membership_exemption)
) %>%
rename("Personal exemption" = count_personal_exemption) %>%
rename("Medical exemption" = count_medical_exemption) %>%
rename("Religious exemption" = count_religious_exemption) %>%
rename("Religious membership exemption" = count_religious_membership_exemption)
# organized exemption_sums to make it easy to work with
exemption_summary <- exemption_sums %>%
gather(key = "reasons", value = "count",
"Personal exemption", "Medical exemption",
"Religious exemption", "Religious membership exemption") %>%
arrange(-count)
# plotly piechart to display counts and percentages
exemption_vis <- plot_ly(data = exemption_summary, labels = ~reasons,
values = ~count, type = 'pie')
exemption_vis <- exemption_vis %>%
layout(title = 'Exemption Count and Percentages',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
exemption_vis
View(vac_2017)
library(tidyr)
library(dplyr)
library(ggplot2)
data <- read.csv(
"../data/immunization_2017.csv",
stringsAsFactors = FALSE
)
# Filter data to columns used
data <- filter(data, Reported == "Y") %>%
select(-Reported, -School_Name, -School_year, -ESD, -Grade_Levels,
-Has_kindergarten, -Has_6thGrade, -Location.1, -contains("Percent"))
# Data frame to keep track of which district is in which county
counties_districts <- select(data, School_District, County) %>%
distinct(School_District, .keep_all = TRUE)
# Districts statistics (data frame and plots)
districts_data <- select(data, -School_District, -County) %>%
aggregate(list(data$School_District), sum) %>%
mutate(Immunization_Percentage = (Number_complete_for_all_immunizations/K_12_enrollment) * 100)
colnames(districts_data)[1] <- "School_District"
districts_data <- inner_join(districts_data, counties_districts, by = "School_District")
districts_in_counties <- split(districts_data, districts_data$County)
i <- 1
plot_list <- list()
while(i <= length(districts_in_counties)){
df <- data.frame(districts_in_counties[[i]])
plot_list[[i]] <- df
i <- i + 1
}
districts_plot <- lapply(plot_list, function(x){
ggplot(x) +
geom_bar(mapping = aes(x = School_District, y = Immunization_Percentage, fill = School_District),
stat = "identity", show.legend = FALSE) +
geom_text(mapping = aes(x = School_District, y = Immunization_Percentage,
label = signif(Immunization_Percentage, digits = 4)), size = 3) +
labs(x = "School District", y = "Immunization Rate") +
coord_flip() +
facet_wrap(~County)
}
)
View(counties_districts)
View(counties_districts)
View(counties_districts)
View(data)
View(districts_data)
install.packages("mapproj")
install.packages("maps")
